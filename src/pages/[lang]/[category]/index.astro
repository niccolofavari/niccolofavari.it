---
// src/pages/[lang]/[category]/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro'; // Adjust path as needed

export async function getStaticPaths() {
  const enEntries = await getCollection('en');
  const itEntries = await getCollection('it');
  const allEntries = [...enEntries, ...itEntries];

  const paths = new Set<string>();

  allEntries.forEach(entry => {
    const lang = entry.collection;
    const slugParts = entry.slug.split('/');
    if (slugParts.length >= 1) { // Ensure there's at least a category in the slug
      const category = slugParts[0];
      paths.add(`${lang}/${category}`);
    }
  });

  return Array.from(paths).map(path => {
    const [lang, category] = path.split('/');
    return {
      params: { lang, category },
    };
  });
}

const { lang, category } = Astro.params;

// Fetch entries for the current lang and category
const entriesForCategory = await getCollection(lang as 'en' | 'it', (entry) => {
  // Filter by category (first part of the slug)
  return entry.slug.startsWith(`${category}/`);
});

// Sort entries by publication date, newest first
entriesForCategory.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const pageTitle = `${category.charAt(0).toUpperCase() + category.slice(1).replace(/-/g, ' ')} - ${lang.toUpperCase()}`;
const pageDescription = `A collection of articles in the ${category} category, in ${lang === 'en' ? 'English' : 'Italian'}.`;
---
<BaseLayout title={pageTitle} description={pageDescription} lang={lang}>
  <section class="py-8">
    <h1 class="text-4xl font-bold mb-2 capitalize">{category.replace(/-/g, ' ')}</h1>
    <p class="text-xl text-slate-600 dark:text-slate-400 mb-8">Language: {lang === 'en' ? 'English' : 'Italian'}</p>

    {entriesForCategory.length === 0 ? (
      <p>No posts found in this category yet.</p>
    ) : (
      <ul class="space-y-6">
        {entriesForCategory.map(entry => {
          const entrySlugParts = entry.slug.split('/');
          const entryActualSlug = entrySlugParts.slice(1).join('/'); // Remove category part
          const entryUrl = `/${lang}/${category}/${entryActualSlug}`;
          return (
            <li class="p-6 bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-shadow">
              <h2 class="text-2xl font-semibold mb-2">
                <a href={entryUrl} class="text-blue-600 dark:text-blue-400 hover:underline">
                  {entry.data.title}
                </a>
              </h2>
              <p class="text-sm text-slate-500 dark:text-slate-400 mb-1">
                Published: {new Date(entry.data.pubDate).toLocaleDateString(lang, { year: 'numeric', month: 'long', day: 'numeric' })}
              </p>
              {entry.data.description && (
                <p class="text-slate-700 dark:text-slate-300 mb-3">{entry.data.description}</p>
              )}
              <a href={entryUrl} class="text-blue-600 dark:text-blue-400 hover:underline font-medium">
                Read more &rarr;
              </a>
            </li>
          )
        })}
      </ul>
    )}
  </section>
</BaseLayout>
