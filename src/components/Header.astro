---
// src/components/Header.astro
import { SITE_TITLE_EN, SITE_TITLE_IT, NAV_LINKS_CONFIG } from '../site-config';

interface NavLink {
    name: string;
    href: string;
    categorySlug: string;
}

const { lang, currentPath, translationKey } = Astro.props; 

const siteTitle = lang === 'it' ? SITE_TITLE_IT : SITE_TITLE_EN;
const navLinks: NavLink[] = lang === 'it' ? NAV_LINKS_CONFIG.it : NAV_LINKS_CONFIG.en;

const otherLang = lang === 'en' ? 'it' : 'en';
let otherLangPath = `/${otherLang}/`; 

// New logic: Find the translated page using the translationKey for content pages
if (translationKey) {
    const allContent = await Astro.glob('../content/**/*.mdx');
    const translatedPage = allContent.find(p => 
        p.frontmatter.translationKey === translationKey && p.frontmatter.lang === otherLang
    );

    if (translatedPage && translatedPage.url) {
        // The .url from glob is the path from the project root, e.g., /src/content/en/essays/my-essay.mdx
        // We need to parse it to build the final web path.
        const urlParts = translatedPage.url.split('/').filter(Boolean); // filter(Boolean) removes empty strings
        // Expected structure: ['src', 'content', lang, category, slug.mdx]
        if (urlParts.length === 5) {
            const langPart = urlParts[2];
            const categoryPart = urlParts[3];
            const slugPart = urlParts[4].replace(/\.mdx$/, ''); // Remove .mdx extension
            otherLangPath = `/${langPart}/${categoryPart}/${slugPart}/`;
        }
    }
    // If no translation is found, it will default to the root of the other language, which is a safe fallback.
} 
// Fallback for non-content pages (like category indexes) that don't have a translationKey
else if (currentPath) {
  const pathParts = currentPath.split('/').filter((p: string) => p); 
  
  if (pathParts.length > 1) { 
    pathParts[0] = otherLang; 
    
    const currentCategorySlug = pathParts[1];
    const currentLangNavs = NAV_LINKS_CONFIG[lang as keyof typeof NAV_LINKS_CONFIG];
    const otherLangNavs = NAV_LINKS_CONFIG[otherLang as keyof typeof NAV_LINKS_CONFIG];

    if (currentLangNavs && otherLangNavs) {
        const currentNavLinkIndex = currentLangNavs.findIndex((link: NavLink) => link.categorySlug === currentCategorySlug);
        if (currentNavLinkIndex !== -1 && otherLangNavs[currentNavLinkIndex] && otherLangNavs[currentNavLinkIndex].categorySlug !== 'home') {
            pathParts[1] = otherLangNavs[currentNavLinkIndex].categorySlug;
        }
    }
    // Reconstruct the path. Add a trailing slash if the original path had one and it's a category index.
    otherLangPath = `/${pathParts.join('/')}${currentPath.endsWith('/') && pathParts.length <= 2 ? '/' : ''}`;
  }
}
---
<header class="site-header">
  <nav class="site-header__nav container">
    <div class="site-header__brand">
      <a href={`/${lang}/`}>{siteTitle}</a>
    </div>
    <div class="site-header__actions">
      <a 
        href={otherLangPath} 
        aria-label={lang === 'en' ? 'Switch to Italian' : 'Passa all\'Inglese'}
        class="site-header__lang-switcher"
      >
        {otherLang.toUpperCase()}
      </a>
      <div class="site-header__menu">
        {navLinks.filter((link: NavLink) => link.categorySlug !== "home").map((link: NavLink) => {
          const isActive = currentPath === link.href || (currentPath && link.href !== `/${lang}/` && currentPath.startsWith(link.href));
          return (
            <a 
              href={link.href} 
              class:list={["site-header__menu-link", { "is-active": isActive }]}
              aria-current={isActive ? "page" : false}
            >
              {link.name}
            </a>
          );
        })}
      </div>
      {/* TODO: Mobile menu (hamburger) can be added here */}
    </div>
  </nav>
</header>

<style lang="scss">
  @use 'sass:color';
  @use '../styles/utils/variables' as *;

  .site-header {
    background-color: $color-bg-light;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    position: sticky;
    top: 0;
    z-index: $z-index-sticky;
    padding: $space-s 0;
  }

  .site-header__nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .site-header__brand a {
    font-size: $font-size-step-1;
    font-weight: 700;
    color: $color-text-dark;
    text-decoration: none;
    transition: color $transition-base;

    &:hover, &:focus {
      color: $color-secondary;
    }
  }

  .site-header__actions {
    display: flex;
    align-items: center;
  }

  .site-header__lang-switcher {
    padding: 0.5em 1em;
    border: 1px solid $color-border;
    border-radius: $border-radius-md;
    text-decoration: none;
    font-size: $font-size-step-minus-1;
    font-weight: 600;
    color: $color-text-dark;
    margin-right: $space-m;
    transition: $transition-base;

    &:hover, &:focus {
      background-color: $color-secondary;
      color: $color-text-light;
      border-color: $color-secondary;
    }
  }

  .site-header__menu-link {
    padding: 0.5em 1em;
    text-decoration: none;
    color: $color-text-dark;
    border-radius: $border-radius-md;
    transition: $transition-base;
    font-size: $font-size-step-0;

    &:hover, &:focus {
      color: $color-secondary;
    }

    &.is-active {
      font-weight: 700;
      color: $color-primary;
    }
  }

  // Dark Mode Styles
  :global(.dark) {
    .site-header {
      background-color: $color-bg-dark;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .site-header__brand a {
      color: $color-text-light;
      &:hover, &:focus {
        color: $color-accent;
      }
    }

    .site-header__lang-switcher {
      color: $color-text-light;
      border-color: $color-border-dark;
      &:hover, &:focus {
        background-color: $color-accent;
        color: $color-text-dark;
        border-color: $color-accent;
      }
    }

    .site-header__menu-link {
      color: $color-text-light;
      &:hover, &:focus {
        color: $color-accent;
      }
      &.is-active {
        color: $color-accent;
      }
    }
  }
</style>
